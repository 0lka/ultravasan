async function fetchSheetData() {
    const sheetID = "1K8PnqG2LdiANzL-VXa6MxTa90dHj311Ch9bdyJiRYQA"; // Byt ut mot ditt Google Sheet ID
    const url = `https://opensheet.elk.sh/${sheetID}/1`; // H√§mtar f√∂rsta fliken

    try {
        const response = await fetch(url);
        const data = await response.json();

        // Sortera datan efter antal kilometer i fallande ordning
        data.sort((a, b) => {
            let kmA = parseFloat(a.Kilometer.replace(",", ".") || 0); // Konvertera till flyttal
            let kmB = parseFloat(b.Kilometer.replace(",", ".") || 0); // Konvertera till flyttal

            if (isNaN(kmA)) kmA = 0; // Om det √§r NaN, s√§tt det till 0
            if (isNaN(kmB)) kmB = 0; // Om det √§r NaN, s√§tt det till 0

            return kmB - kmA; // Sortera i fallande ordning (st√∂rsta f√∂rst)
        });

        const tableBody = document.getElementById("data");
        tableBody.innerHTML = ""; // T√∂m tabellen

        // Skapa tabellrader
        data.forEach(row => {
            let name = row.Namn;
            let km = parseFloat(row.Kilometer.replace(",", ".") || 0); // Konvertera text till flyttal

            if (isNaN(km)) {
                km = 0; // Om det √§r NaN, s√§tt det till 0
            }

            let percent = Math.min((km / 450) * 100, 100); // Ber√§kna progress, max 100%

            // Status baserat p√• antal kilometer
            let status = "üöÄ Nu k√∂r vi!";
            if (km >= 100) status = "üî• Redan √∂ver 100 km!";
            if (km >= 225) status = "üí™ Halvv√§gs!";
            if (km >= 400) status = "üéâ Snart framme!";
            if (km >= 450) status = "üèÜ M√ÖL!";

            // Skapa tabellrad
            let tr = document.createElement("tr");
            tr.innerHTML = `
                <td>${name}</td>
                <td>${km.toFixed(1)} km</td>
                <td>
                    <div class="progress-container">
                        <div class="progress-bar" style="width: ${percent}%"></div>
                    </div>
                </td>
                <td class="status">${status}</td>
            `;
            tableBody.appendChild(tr);
        });
    } catch (error) {
        console.error("Fel vid h√§mtning av data:", error);
    }
}

// Funktion f√∂r att ber√§kna nedr√§kningen
function updateCountdown() {
    const targetDate = new Date('2025-08-16'); // M√•ldatum: 16 augusti 2025
    const today = new Date();
    
    // Ber√§kna skillnaden mellan idag och m√•ldatumet
    const timeDiff = targetDate - today;
    const daysLeft = Math.ceil(timeDiff / (1000 * 3600 * 24)); // Omvandla till dagar
    
    // Uppdatera nedr√§kningen p√• sidan
    document.getElementById("days-left").textContent = daysLeft;
}

// K√∂r funktionen f√∂r att uppdatera nedr√§kningen n√§r sidan laddas
updateCountdown();


// K√∂r funktionen n√§r sidan laddas
fetchSheetData();
